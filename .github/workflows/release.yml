name: Release

run-name: release version ${{ inputs.version }} by @${{ github.actor }}

on:
  workflow_dispatch:
    branches: ["main"]
    inputs:
      version:
        type: choice
        description: 'part of the project version to update'
        options:
        - major
        - minor
        - patch
        required: true

env:
  PIP_NO_OPTION: on
  PIP_NO_CLEAN: on
  PIP_PREFER_BINARY: on

permissions:
  contents: write
  packages: write

concurrency:
  group: "release"
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      tag: ${{ steps.release.outputs.tag }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache requirements
        uses: actions/cache@v4
        env:
          cache-name: cache-requirements
        with:
          path: ~/.cache/pip
          key: ${{ env.cache-name }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ env.cache-name }}-

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install requirements
        run: make setup

      - name: Release new version
        id: release
        run: |
          git config --global user.name 'RKIMetadataExchange'
          git config --global user.email 'mex@rki.de'
          pdm release ${{ inputs.version }}
          echo "tag=$(git describe --abbrev=0 --tags)" >> "$GITHUB_OUTPUT"

  containerize:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: release
    steps:
      - name: Build, tag and push docker image to ghcr
        uses: GlueOps/github-actions-build-push-containers@v0.4.2
        with:
          tags: "${{ github.sha }},${{ needs.release.outputs.tag }},latest"

  distribute:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: release
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Cache requirements
        uses: actions/cache@v4
        env:
          cache-name: cache-requirements
        with:
          path: ~/.cache/pip
          key: ${{ env.cache-name }}-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ env.cache-name }}-

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install requirements
        run: make setup

      - name: Build wheel and sdist distros and create a github release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          pdm build --dest dist
          gh release create ${{ needs.release.outputs.tag }} --generate-notes --latest --verify-tag
          for filename in dist/*; do
            gh release upload ${{ needs.release.outputs.tag }} ${filename};
          done
